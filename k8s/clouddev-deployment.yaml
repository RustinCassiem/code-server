apiVersion: v1
kind: Namespace
metadata:
  name: clouddev
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clouddev-config
  namespace: clouddev
data:
  ENVIRONMENT: "production"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "clouddev"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  STORAGE_PATH: "/app/data"
  ENABLE_SANDBOX: "true"
  RATE_LIMIT: "100"
---
apiVersion: v1
kind: Secret
metadata:
  name: clouddev-secrets
  namespace: clouddev
type: Opaque
data:
  DB_USER: Y2xvdWRkZXY=  # clouddev (base64)
  DB_PASSWORD: Y2xvdWRkZXYxMjM=  # clouddev123 (base64)
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==  # your-super-secret-jwt-key-change-in-production (base64)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clouddev-server
  namespace: clouddev
  labels:
    app: clouddev-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: clouddev-server
  template:
    metadata:
      labels:
        app: clouddev-server
    spec:
      containers:
      - name: clouddev-server
        image: clouddev/server:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: clouddev-config
        - secretRef:
            name: clouddev-secrets
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: docker-socket
          mountPath: /var/run/docker.sock
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: clouddev-data-pvc
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      securityContext:
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: clouddev-service
  namespace: clouddev
spec:
  selector:
    app: clouddev-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clouddev-data-pvc
  namespace: clouddev
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clouddev-ingress
  namespace: clouddev
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/websocket-services: "clouddev-service"
spec:
  tls:
  - hosts:
    - clouddev.yourdomain.com
    secretName: clouddev-tls
  rules:
  - host: clouddev.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: clouddev-service
            port:
              number: 80
